# Expressions and values

Expressions describe programs, values are the results of evaluating expressions

# Types
Types describe set of values.

Example:
1 + 2 is Int the value of this expression is one of the 4.2 billion values
that computer understands to be integers ("whole numbers").

We know type if expression without running it - type is a property of expression,
not a value.

Compilation checks that a program is well structured: syntax is correct,
types are checked.

This syntax is incorrect:
Blabla / \ "S
This is correct:
val number = 5

You can do different things with different types. Not all operations are possible
on all types. For example, type-checker rejects `1.toUpperCase` because you
cannot make number upper case.

Type-checking when compiling helps you avoid  many errors before running program.

Types in compilation and values at runtime. Types are not included at runtime,
those are tags, which can be avoided to make programs efficient (type erasure).

# Recap
Scala has expressions, values and types.
Evaluation turns expressions into values.
Evaluation is preceeded by compilation, which performs type-checking.


